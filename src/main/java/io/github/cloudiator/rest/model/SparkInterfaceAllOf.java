/*
 * Cloudiator REST Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 * Contact: daniel.baur@uni-ulm.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.cloudiator.rest.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.github.cloudiator.rest.model.ProcessMapping;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.io.Serializable;

/**
 * SparkInterfaceAllOf
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2020-01-10T15:38:08.423+01:00[Europe/Berlin]")
public class SparkInterfaceAllOf implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_FILE = "file";
  @SerializedName(SERIALIZED_NAME_FILE)
  private String file;

  public static final String SERIALIZED_NAME_CLASS_NAME = "className";
  @SerializedName(SERIALIZED_NAME_CLASS_NAME)
  private String className;

  public static final String SERIALIZED_NAME_ARGUMENTS = "arguments";
  @SerializedName(SERIALIZED_NAME_ARGUMENTS)
  private List<String> arguments = null;

  public static final String SERIALIZED_NAME_SPARK_ARGUMENTS = "sparkArguments";
  @SerializedName(SERIALIZED_NAME_SPARK_ARGUMENTS)
  private Map<String, String> sparkArguments = null;

  public static final String SERIALIZED_NAME_SPARK_CONFIGURATION = "sparkConfiguration";
  @SerializedName(SERIALIZED_NAME_SPARK_CONFIGURATION)
  private Map<String, String> sparkConfiguration = null;

  public static final String SERIALIZED_NAME_PROCESS_MAPPING = "processMapping";
  @SerializedName(SERIALIZED_NAME_PROCESS_MAPPING)
  private ProcessMapping processMapping;


  public SparkInterfaceAllOf file(String file) {
    
    this.file = file;
    return this;
  }

   /**
   * An URI where the executable of the Spark Application can be retrieved. Either a URL pointing to a web endpoint, or a locally available file. 
   * @return file
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "An URI where the executable of the Spark Application can be retrieved. Either a URL pointing to a web endpoint, or a locally available file. ")

  public String getFile() {
    return file;
  }


  public void setFile(String file) {
    this.file = file;
  }


  public SparkInterfaceAllOf className(String className) {
    
    this.className = className;
    return this;
  }

   /**
   * Optional className of the class containing the main method. Only required for Java. 
   * @return className
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Optional className of the class containing the main method. Only required for Java. ")

  public String getClassName() {
    return className;
  }


  public void setClassName(String className) {
    this.className = className;
  }


  public SparkInterfaceAllOf arguments(List<String> arguments) {
    
    this.arguments = arguments;
    return this;
  }

  public SparkInterfaceAllOf addArgumentsItem(String argumentsItem) {
    if (this.arguments == null) {
      this.arguments = new ArrayList<String>();
    }
    this.arguments.add(argumentsItem);
    return this;
  }

   /**
   * Array of arguments passed to the application. 
   * @return arguments
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Array of arguments passed to the application. ")

  public List<String> getArguments() {
    return arguments;
  }


  public void setArguments(List<String> arguments) {
    this.arguments = arguments;
  }


  public SparkInterfaceAllOf sparkArguments(Map<String, String> sparkArguments) {
    
    this.sparkArguments = sparkArguments;
    return this;
  }

  public SparkInterfaceAllOf putSparkArgumentsItem(String key, String sparkArgumentsItem) {
    if (this.sparkArguments == null) {
      this.sparkArguments = new HashMap<String, String>();
    }
    this.sparkArguments.put(key, sparkArgumentsItem);
    return this;
  }

   /**
   * A key - value type of Map using &lt;String, String&gt;. 
   * @return sparkArguments
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A key - value type of Map using <String, String>. ")

  public Map<String, String> getSparkArguments() {
    return sparkArguments;
  }


  public void setSparkArguments(Map<String, String> sparkArguments) {
    this.sparkArguments = sparkArguments;
  }


  public SparkInterfaceAllOf sparkConfiguration(Map<String, String> sparkConfiguration) {
    
    this.sparkConfiguration = sparkConfiguration;
    return this;
  }

  public SparkInterfaceAllOf putSparkConfigurationItem(String key, String sparkConfigurationItem) {
    if (this.sparkConfiguration == null) {
      this.sparkConfiguration = new HashMap<String, String>();
    }
    this.sparkConfiguration.put(key, sparkConfigurationItem);
    return this;
  }

   /**
   * A key - value type of Map using &lt;String, String&gt;. 
   * @return sparkConfiguration
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A key - value type of Map using <String, String>. ")

  public Map<String, String> getSparkConfiguration() {
    return sparkConfiguration;
  }


  public void setSparkConfiguration(Map<String, String> sparkConfiguration) {
    this.sparkConfiguration = sparkConfiguration;
  }


  public SparkInterfaceAllOf processMapping(ProcessMapping processMapping) {
    
    this.processMapping = processMapping;
    return this;
  }

   /**
   * Get processMapping
   * @return processMapping
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ProcessMapping getProcessMapping() {
    return processMapping;
  }


  public void setProcessMapping(ProcessMapping processMapping) {
    this.processMapping = processMapping;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SparkInterfaceAllOf sparkInterfaceAllOf = (SparkInterfaceAllOf) o;
    return Objects.equals(this.file, sparkInterfaceAllOf.file) &&
        Objects.equals(this.className, sparkInterfaceAllOf.className) &&
        Objects.equals(this.arguments, sparkInterfaceAllOf.arguments) &&
        Objects.equals(this.sparkArguments, sparkInterfaceAllOf.sparkArguments) &&
        Objects.equals(this.sparkConfiguration, sparkInterfaceAllOf.sparkConfiguration) &&
        Objects.equals(this.processMapping, sparkInterfaceAllOf.processMapping);
  }

  @Override
  public int hashCode() {
    return Objects.hash(file, className, arguments, sparkArguments, sparkConfiguration, processMapping);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SparkInterfaceAllOf {\n");
    sb.append("    file: ").append(toIndentedString(file)).append("\n");
    sb.append("    className: ").append(toIndentedString(className)).append("\n");
    sb.append("    arguments: ").append(toIndentedString(arguments)).append("\n");
    sb.append("    sparkArguments: ").append(toIndentedString(sparkArguments)).append("\n");
    sb.append("    sparkConfiguration: ").append(toIndentedString(sparkConfiguration)).append("\n");
    sb.append("    processMapping: ").append(toIndentedString(processMapping)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

