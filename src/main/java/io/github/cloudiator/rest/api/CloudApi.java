/*
 * Cloudiator REST Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 * Contact: daniel.baur@uni-ulm.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.cloudiator.rest.api;

import io.github.cloudiator.rest.ApiCallback;
import io.github.cloudiator.rest.ApiClient;
import io.github.cloudiator.rest.ApiException;
import io.github.cloudiator.rest.ApiResponse;
import io.github.cloudiator.rest.Configuration;
import io.github.cloudiator.rest.Pair;
import io.github.cloudiator.rest.ProgressRequestBody;
import io.github.cloudiator.rest.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.github.cloudiator.rest.model.Cloud;
import io.github.cloudiator.rest.model.Error;
import io.github.cloudiator.rest.model.Function;
import io.github.cloudiator.rest.model.Hardware;
import io.github.cloudiator.rest.model.Image;
import io.github.cloudiator.rest.model.Location;
import io.github.cloudiator.rest.model.NewCloud;
import io.github.cloudiator.rest.model.Queue;
import io.github.cloudiator.rest.model.VirtualMachine;
import io.github.cloudiator.rest.model.VirtualMachineRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CloudApi {
    private ApiClient localVarApiClient;

    public CloudApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CloudApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for addCloud
     * @param cloud Cloud to add (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization for this action is missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden action </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected Error occured </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Service temporary unavailable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addCloudCall(NewCloud cloud, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = cloud;

        // create path and map variables
        String localVarPath = "/clouds";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "code", "message", 
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addCloudValidateBeforeCall(NewCloud cloud, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'cloud' is set
        if (cloud == null) {
            throw new ApiException("Missing the required parameter 'cloud' when calling addCloud(Async)");
        }
        

        okhttp3.Call localVarCall = addCloudCall(cloud, _callback);
        return localVarCall;

    }

    /**
     * 
     * Creates a new cloud.
     * @param cloud Cloud to add (required)
     * @return Cloud
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization for this action is missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden action </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected Error occured </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Service temporary unavailable </td><td>  -  </td></tr>
     </table>
     */
    public Cloud addCloud(NewCloud cloud) throws ApiException {
        ApiResponse<Cloud> localVarResp = addCloudWithHttpInfo(cloud);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates a new cloud.
     * @param cloud Cloud to add (required)
     * @return ApiResponse&lt;Cloud&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization for this action is missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden action </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected Error occured </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Service temporary unavailable </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Cloud> addCloudWithHttpInfo(NewCloud cloud) throws ApiException {
        okhttp3.Call localVarCall = addCloudValidateBeforeCall(cloud, null);
        Type localVarReturnType = new TypeToken<Cloud>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates a new cloud.
     * @param cloud Cloud to add (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization for this action is missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden action </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected Error occured </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Service temporary unavailable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addCloudAsync(NewCloud cloud, final ApiCallback<Cloud> _callback) throws ApiException {

        okhttp3.Call localVarCall = addCloudValidateBeforeCall(cloud, _callback);
        Type localVarReturnType = new TypeToken<Cloud>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for addVM
     * @param virtualMachineRequest VirtualMachine Request (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> ACCEPTED </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization for this action is missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden action </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected Error occured </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Server temporary not available </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addVMCall(VirtualMachineRequest virtualMachineRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = virtualMachineRequest;

        // create path and map variables
        String localVarPath = "/vm";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "code", "message", 
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addVMValidateBeforeCall(VirtualMachineRequest virtualMachineRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'virtualMachineRequest' is set
        if (virtualMachineRequest == null) {
            throw new ApiException("Missing the required parameter 'virtualMachineRequest' when calling addVM(Async)");
        }
        

        okhttp3.Call localVarCall = addVMCall(virtualMachineRequest, _callback);
        return localVarCall;

    }

    /**
     * 
     * Creates a new virtual machine request
     * @param virtualMachineRequest VirtualMachine Request (required)
     * @return Queue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> ACCEPTED </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization for this action is missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden action </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected Error occured </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Server temporary not available </td><td>  -  </td></tr>
     </table>
     */
    public Queue addVM(VirtualMachineRequest virtualMachineRequest) throws ApiException {
        ApiResponse<Queue> localVarResp = addVMWithHttpInfo(virtualMachineRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates a new virtual machine request
     * @param virtualMachineRequest VirtualMachine Request (required)
     * @return ApiResponse&lt;Queue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> ACCEPTED </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization for this action is missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden action </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected Error occured </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Server temporary not available </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Queue> addVMWithHttpInfo(VirtualMachineRequest virtualMachineRequest) throws ApiException {
        okhttp3.Call localVarCall = addVMValidateBeforeCall(virtualMachineRequest, null);
        Type localVarReturnType = new TypeToken<Queue>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates a new virtual machine request
     * @param virtualMachineRequest VirtualMachine Request (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> ACCEPTED </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization for this action is missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden action </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected Error occured </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Server temporary not available </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addVMAsync(VirtualMachineRequest virtualMachineRequest, final ApiCallback<Queue> _callback) throws ApiException {

        okhttp3.Call localVarCall = addVMValidateBeforeCall(virtualMachineRequest, _callback);
        Type localVarReturnType = new TypeToken<Queue>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteCloud
     * @param id Unique identifier of the resource (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization for this action is missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden action </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected Error occured </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Server temporary not available </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCloudCall(String id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/clouds/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "code", "message"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteCloudValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteCloud(Async)");
        }
        

        okhttp3.Call localVarCall = deleteCloudCall(id, _callback);
        return localVarCall;

    }

    /**
     * 
     * Deletes the cloud identified by the given id paramater. 
     * @param id Unique identifier of the resource (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization for this action is missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden action </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected Error occured </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Server temporary not available </td><td>  -  </td></tr>
     </table>
     */
    public void deleteCloud(String id) throws ApiException {
        deleteCloudWithHttpInfo(id);
    }

    /**
     * 
     * Deletes the cloud identified by the given id paramater. 
     * @param id Unique identifier of the resource (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization for this action is missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden action </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected Error occured </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Server temporary not available </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteCloudWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = deleteCloudValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes the cloud identified by the given id paramater. 
     * @param id Unique identifier of the resource (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization for this action is missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden action </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected Error occured </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Server temporary not available </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCloudAsync(String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteCloudValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for discoveryStatus
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call discoveryStatusCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/discovery/status";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call discoveryStatusValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = discoveryStatusCall(_callback);
        return localVarCall;

    }

    /**
     * 
     * Gets the status of the discovery engine 
     * @return Map&lt;String, String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK  </td><td>  -  </td></tr>
     </table>
     */
    public Map<String, String> discoveryStatus() throws ApiException {
        ApiResponse<Map<String, String>> localVarResp = discoveryStatusWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the status of the discovery engine 
     * @return ApiResponse&lt;Map&lt;String, String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Map<String, String>> discoveryStatusWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = discoveryStatusValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Map<String, String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the status of the discovery engine 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call discoveryStatusAsync(final ApiCallback<Map<String, String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = discoveryStatusValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Map<String, String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for editHardware
     * @param id Unique identifier of the resource (required)
     * @param hardware Hardware to update  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization for this action is missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden action </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected Error occured </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Server temporary not available </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call editHardwareCall(String id, Hardware hardware, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = hardware;

        // create path and map variables
        String localVarPath = "/hardware/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "code", "message", 
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call editHardwareValidateBeforeCall(String id, Hardware hardware, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling editHardware(Async)");
        }
        
        // verify the required parameter 'hardware' is set
        if (hardware == null) {
            throw new ApiException("Missing the required parameter 'hardware' when calling editHardware(Async)");
        }
        

        okhttp3.Call localVarCall = editHardwareCall(id, hardware, _callback);
        return localVarCall;

    }

    /**
     * 
     * Updates a specific hardware 
     * @param id Unique identifier of the resource (required)
     * @param hardware Hardware to update  (required)
     * @return Hardware
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization for this action is missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden action </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected Error occured </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Server temporary not available </td><td>  -  </td></tr>
     </table>
     */
    public Hardware editHardware(String id, Hardware hardware) throws ApiException {
        ApiResponse<Hardware> localVarResp = editHardwareWithHttpInfo(id, hardware);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates a specific hardware 
     * @param id Unique identifier of the resource (required)
     * @param hardware Hardware to update  (required)
     * @return ApiResponse&lt;Hardware&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization for this action is missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden action </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected Error occured </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Server temporary not available </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Hardware> editHardwareWithHttpInfo(String id, Hardware hardware) throws ApiException {
        okhttp3.Call localVarCall = editHardwareValidateBeforeCall(id, hardware, null);
        Type localVarReturnType = new TypeToken<Hardware>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates a specific hardware 
     * @param id Unique identifier of the resource (required)
     * @param hardware Hardware to update  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization for this action is missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden action </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected Error occured </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Server temporary not available </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call editHardwareAsync(String id, Hardware hardware, final ApiCallback<Hardware> _callback) throws ApiException {

        okhttp3.Call localVarCall = editHardwareValidateBeforeCall(id, hardware, _callback);
        Type localVarReturnType = new TypeToken<Hardware>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for editImage
     * @param id Unique identifier of the resource (required)
     * @param image Image to update  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization for this action is missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden action </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected Error occured </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Server temporary not available </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call editImageCall(String id, Image image, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = image;

        // create path and map variables
        String localVarPath = "/images/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "code", "message", 
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call editImageValidateBeforeCall(String id, Image image, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling editImage(Async)");
        }
        
        // verify the required parameter 'image' is set
        if (image == null) {
            throw new ApiException("Missing the required parameter 'image' when calling editImage(Async)");
        }
        

        okhttp3.Call localVarCall = editImageCall(id, image, _callback);
        return localVarCall;

    }

    /**
     * 
     * Updates a specific image 
     * @param id Unique identifier of the resource (required)
     * @param image Image to update  (required)
     * @return Image
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization for this action is missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden action </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected Error occured </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Server temporary not available </td><td>  -  </td></tr>
     </table>
     */
    public Image editImage(String id, Image image) throws ApiException {
        ApiResponse<Image> localVarResp = editImageWithHttpInfo(id, image);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates a specific image 
     * @param id Unique identifier of the resource (required)
     * @param image Image to update  (required)
     * @return ApiResponse&lt;Image&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization for this action is missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden action </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected Error occured </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Server temporary not available </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Image> editImageWithHttpInfo(String id, Image image) throws ApiException {
        okhttp3.Call localVarCall = editImageValidateBeforeCall(id, image, null);
        Type localVarReturnType = new TypeToken<Image>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates a specific image 
     * @param id Unique identifier of the resource (required)
     * @param image Image to update  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization for this action is missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden action </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected Error occured </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Server temporary not available </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call editImageAsync(String id, Image image, final ApiCallback<Image> _callback) throws ApiException {

        okhttp3.Call localVarCall = editImageValidateBeforeCall(id, image, _callback);
        Type localVarReturnType = new TypeToken<Image>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for editLocation
     * @param id Unique identifier of the resource (required)
     * @param location Location to update  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization for this action is missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden action </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected Error occured </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Server temporary not available </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call editLocationCall(String id, Location location, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = location;

        // create path and map variables
        String localVarPath = "/locations/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "code", "message", 
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call editLocationValidateBeforeCall(String id, Location location, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling editLocation(Async)");
        }
        
        // verify the required parameter 'location' is set
        if (location == null) {
            throw new ApiException("Missing the required parameter 'location' when calling editLocation(Async)");
        }
        

        okhttp3.Call localVarCall = editLocationCall(id, location, _callback);
        return localVarCall;

    }

    /**
     * 
     * Updates a specific location 
     * @param id Unique identifier of the resource (required)
     * @param location Location to update  (required)
     * @return Location
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization for this action is missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden action </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected Error occured </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Server temporary not available </td><td>  -  </td></tr>
     </table>
     */
    public Location editLocation(String id, Location location) throws ApiException {
        ApiResponse<Location> localVarResp = editLocationWithHttpInfo(id, location);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates a specific location 
     * @param id Unique identifier of the resource (required)
     * @param location Location to update  (required)
     * @return ApiResponse&lt;Location&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization for this action is missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden action </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected Error occured </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Server temporary not available </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Location> editLocationWithHttpInfo(String id, Location location) throws ApiException {
        okhttp3.Call localVarCall = editLocationValidateBeforeCall(id, location, null);
        Type localVarReturnType = new TypeToken<Location>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates a specific location 
     * @param id Unique identifier of the resource (required)
     * @param location Location to update  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization for this action is missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden action </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected Error occured </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Server temporary not available </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call editLocationAsync(String id, Location location, final ApiCallback<Location> _callback) throws ApiException {

        okhttp3.Call localVarCall = editLocationValidateBeforeCall(id, location, _callback);
        Type localVarReturnType = new TypeToken<Location>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for findCloud
     * @param id Unique identifier of the resource (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The cloud identified by the id  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization for this action is missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden action </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected Error occured </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Server temporary not available </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call findCloudCall(String id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/clouds/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "code", "message", 
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call findCloudValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling findCloud(Async)");
        }
        

        okhttp3.Call localVarCall = findCloudCall(id, _callback);
        return localVarCall;

    }

    /**
     * 
     * Returns the cloud identified by the given id parameter 
     * @param id Unique identifier of the resource (required)
     * @return Cloud
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The cloud identified by the id  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization for this action is missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden action </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected Error occured </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Server temporary not available </td><td>  -  </td></tr>
     </table>
     */
    public Cloud findCloud(String id) throws ApiException {
        ApiResponse<Cloud> localVarResp = findCloudWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns the cloud identified by the given id parameter 
     * @param id Unique identifier of the resource (required)
     * @return ApiResponse&lt;Cloud&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The cloud identified by the id  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization for this action is missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden action </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected Error occured </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Server temporary not available </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Cloud> findCloudWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = findCloudValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Cloud>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns the cloud identified by the given id parameter 
     * @param id Unique identifier of the resource (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The cloud identified by the id  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization for this action is missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden action </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected Error occured </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Server temporary not available </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call findCloudAsync(String id, final ApiCallback<Cloud> _callback) throws ApiException {

        okhttp3.Call localVarCall = findCloudValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Cloud>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for findClouds
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All clouds  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization for this action is missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden action </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected Error occured </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Server temporary not available </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call findCloudsCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/clouds";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "code", "message", 
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call findCloudsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = findCloudsCall(_callback);
        return localVarCall;

    }

    /**
     * 
     * Returns all clouds from the system that the user has access to 
     * @return List&lt;Cloud&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All clouds  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization for this action is missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden action </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected Error occured </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Server temporary not available </td><td>  -  </td></tr>
     </table>
     */
    public List<Cloud> findClouds() throws ApiException {
        ApiResponse<List<Cloud>> localVarResp = findCloudsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * Returns all clouds from the system that the user has access to 
     * @return ApiResponse&lt;List&lt;Cloud&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All clouds  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization for this action is missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden action </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected Error occured </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Server temporary not available </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Cloud>> findCloudsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = findCloudsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<Cloud>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns all clouds from the system that the user has access to 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All clouds  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization for this action is missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden action </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected Error occured </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Server temporary not available </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call findCloudsAsync(final ApiCallback<List<Cloud>> _callback) throws ApiException {

        okhttp3.Call localVarCall = findCloudsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<Cloud>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for findFunctions
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call findFunctionsCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/function";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call findFunctionsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = findFunctionsCall(_callback);
        return localVarCall;

    }

    /**
     * 
     * Finds all functions the user has access to
     * @return List&lt;Function&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<Function> findFunctions() throws ApiException {
        ApiResponse<List<Function>> localVarResp = findFunctionsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * Finds all functions the user has access to
     * @return ApiResponse&lt;List&lt;Function&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Function>> findFunctionsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = findFunctionsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<Function>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Finds all functions the user has access to
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call findFunctionsAsync(final ApiCallback<List<Function>> _callback) throws ApiException {

        okhttp3.Call localVarCall = findFunctionsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<Function>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for findHardware
     * @param cloudId (Optional) Unique identifier to filter a specific cloud (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization for this action is missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden action </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected Error occured </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Server temporary not available </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call findHardwareCall(String cloudId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/hardware";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (cloudId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cloudId", cloudId));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "code", "message", 
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call findHardwareValidateBeforeCall(String cloudId, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = findHardwareCall(cloudId, _callback);
        return localVarCall;

    }

    /**
     * 
     * Returns all hardware visible to the user 
     * @param cloudId (Optional) Unique identifier to filter a specific cloud (optional)
     * @return List&lt;Hardware&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization for this action is missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden action </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected Error occured </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Server temporary not available </td><td>  -  </td></tr>
     </table>
     */
    public List<Hardware> findHardware(String cloudId) throws ApiException {
        ApiResponse<List<Hardware>> localVarResp = findHardwareWithHttpInfo(cloudId);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns all hardware visible to the user 
     * @param cloudId (Optional) Unique identifier to filter a specific cloud (optional)
     * @return ApiResponse&lt;List&lt;Hardware&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization for this action is missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden action </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected Error occured </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Server temporary not available </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Hardware>> findHardwareWithHttpInfo(String cloudId) throws ApiException {
        okhttp3.Call localVarCall = findHardwareValidateBeforeCall(cloudId, null);
        Type localVarReturnType = new TypeToken<List<Hardware>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns all hardware visible to the user 
     * @param cloudId (Optional) Unique identifier to filter a specific cloud (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization for this action is missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden action </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected Error occured </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Server temporary not available </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call findHardwareAsync(String cloudId, final ApiCallback<List<Hardware>> _callback) throws ApiException {

        okhttp3.Call localVarCall = findHardwareValidateBeforeCall(cloudId, _callback);
        Type localVarReturnType = new TypeToken<List<Hardware>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for findImages
     * @param cloudId (Optional) Unique identifier to filter a specific cloud (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All images  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization for this action is missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden action </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected Error occured </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Server temporary not available </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call findImagesCall(String cloudId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/images";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (cloudId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cloudId", cloudId));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "code", "message", 
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call findImagesValidateBeforeCall(String cloudId, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = findImagesCall(cloudId, _callback);
        return localVarCall;

    }

    /**
     * 
     * Returns all images visable to the user 
     * @param cloudId (Optional) Unique identifier to filter a specific cloud (optional)
     * @return List&lt;Image&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All images  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization for this action is missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden action </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected Error occured </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Server temporary not available </td><td>  -  </td></tr>
     </table>
     */
    public List<Image> findImages(String cloudId) throws ApiException {
        ApiResponse<List<Image>> localVarResp = findImagesWithHttpInfo(cloudId);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns all images visable to the user 
     * @param cloudId (Optional) Unique identifier to filter a specific cloud (optional)
     * @return ApiResponse&lt;List&lt;Image&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All images  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization for this action is missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden action </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected Error occured </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Server temporary not available </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Image>> findImagesWithHttpInfo(String cloudId) throws ApiException {
        okhttp3.Call localVarCall = findImagesValidateBeforeCall(cloudId, null);
        Type localVarReturnType = new TypeToken<List<Image>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns all images visable to the user 
     * @param cloudId (Optional) Unique identifier to filter a specific cloud (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All images  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization for this action is missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden action </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected Error occured </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Server temporary not available </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call findImagesAsync(String cloudId, final ApiCallback<List<Image>> _callback) throws ApiException {

        okhttp3.Call localVarCall = findImagesValidateBeforeCall(cloudId, _callback);
        Type localVarReturnType = new TypeToken<List<Image>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for findLocations
     * @param cloudId (Optional) Unique identifier to filter a specific cloud (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization for this action is missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden action </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected Error occured </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Server temporary not available </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call findLocationsCall(String cloudId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/locations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (cloudId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cloudId", cloudId));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "code", "message", 
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call findLocationsValidateBeforeCall(String cloudId, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = findLocationsCall(cloudId, _callback);
        return localVarCall;

    }

    /**
     * 
     * Returns all locations visible to the user 
     * @param cloudId (Optional) Unique identifier to filter a specific cloud (optional)
     * @return List&lt;Location&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization for this action is missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden action </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected Error occured </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Server temporary not available </td><td>  -  </td></tr>
     </table>
     */
    public List<Location> findLocations(String cloudId) throws ApiException {
        ApiResponse<List<Location>> localVarResp = findLocationsWithHttpInfo(cloudId);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns all locations visible to the user 
     * @param cloudId (Optional) Unique identifier to filter a specific cloud (optional)
     * @return ApiResponse&lt;List&lt;Location&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization for this action is missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden action </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected Error occured </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Server temporary not available </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Location>> findLocationsWithHttpInfo(String cloudId) throws ApiException {
        okhttp3.Call localVarCall = findLocationsValidateBeforeCall(cloudId, null);
        Type localVarReturnType = new TypeToken<List<Location>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns all locations visible to the user 
     * @param cloudId (Optional) Unique identifier to filter a specific cloud (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization for this action is missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden action </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected Error occured </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Server temporary not available </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call findLocationsAsync(String cloudId, final ApiCallback<List<Location>> _callback) throws ApiException {

        okhttp3.Call localVarCall = findLocationsValidateBeforeCall(cloudId, _callback);
        Type localVarReturnType = new TypeToken<List<Location>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for findVMs
     * @param cloudId (Optional) Unique identifier to filter a specific cloud (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call findVMsCall(String cloudId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/vm";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (cloudId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cloudId", cloudId));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call findVMsValidateBeforeCall(String cloudId, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = findVMsCall(cloudId, _callback);
        return localVarCall;

    }

    /**
     * 
     * Finds all virtual machines the user has access to
     * @param cloudId (Optional) Unique identifier to filter a specific cloud (optional)
     * @return List&lt;VirtualMachine&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<VirtualMachine> findVMs(String cloudId) throws ApiException {
        ApiResponse<List<VirtualMachine>> localVarResp = findVMsWithHttpInfo(cloudId);
        return localVarResp.getData();
    }

    /**
     * 
     * Finds all virtual machines the user has access to
     * @param cloudId (Optional) Unique identifier to filter a specific cloud (optional)
     * @return ApiResponse&lt;List&lt;VirtualMachine&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<VirtualMachine>> findVMsWithHttpInfo(String cloudId) throws ApiException {
        okhttp3.Call localVarCall = findVMsValidateBeforeCall(cloudId, null);
        Type localVarReturnType = new TypeToken<List<VirtualMachine>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Finds all virtual machines the user has access to
     * @param cloudId (Optional) Unique identifier to filter a specific cloud (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call findVMsAsync(String cloudId, final ApiCallback<List<VirtualMachine>> _callback) throws ApiException {

        okhttp3.Call localVarCall = findVMsValidateBeforeCall(cloudId, _callback);
        Type localVarReturnType = new TypeToken<List<VirtualMachine>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getFunction
     * @param id Unique identifier of the resource (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFunctionCall(String id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/function/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFunctionValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getFunction(Async)");
        }
        

        okhttp3.Call localVarCall = getFunctionCall(id, _callback);
        return localVarCall;

    }

    /**
     * 
     * Finds the function identified by the given id parameter
     * @param id Unique identifier of the resource (required)
     * @return Function
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Function getFunction(String id) throws ApiException {
        ApiResponse<Function> localVarResp = getFunctionWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Finds the function identified by the given id parameter
     * @param id Unique identifier of the resource (required)
     * @return ApiResponse&lt;Function&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Function> getFunctionWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = getFunctionValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Function>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Finds the function identified by the given id parameter
     * @param id Unique identifier of the resource (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFunctionAsync(String id, final ApiCallback<Function> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFunctionValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Function>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getHardware
     * @param id Unique identifier of the resource (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getHardwareCall(String id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/hardware/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getHardwareValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getHardware(Async)");
        }
        

        okhttp3.Call localVarCall = getHardwareCall(id, _callback);
        return localVarCall;

    }

    /**
     * 
     * Retrieves the hardware with the given id. 
     * @param id Unique identifier of the resource (required)
     * @return Hardware
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK  </td><td>  -  </td></tr>
     </table>
     */
    public Hardware getHardware(String id) throws ApiException {
        ApiResponse<Hardware> localVarResp = getHardwareWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves the hardware with the given id. 
     * @param id Unique identifier of the resource (required)
     * @return ApiResponse&lt;Hardware&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Hardware> getHardwareWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = getHardwareValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Hardware>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves the hardware with the given id. 
     * @param id Unique identifier of the resource (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getHardwareAsync(String id, final ApiCallback<Hardware> _callback) throws ApiException {

        okhttp3.Call localVarCall = getHardwareValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Hardware>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getImage
     * @param id Unique identifier of the resource (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getImageCall(String id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/images/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getImageValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getImage(Async)");
        }
        

        okhttp3.Call localVarCall = getImageCall(id, _callback);
        return localVarCall;

    }

    /**
     * 
     * Retrieves the image with the given id. 
     * @param id Unique identifier of the resource (required)
     * @return Image
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK  </td><td>  -  </td></tr>
     </table>
     */
    public Image getImage(String id) throws ApiException {
        ApiResponse<Image> localVarResp = getImageWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves the image with the given id. 
     * @param id Unique identifier of the resource (required)
     * @return ApiResponse&lt;Image&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Image> getImageWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = getImageValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Image>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves the image with the given id. 
     * @param id Unique identifier of the resource (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getImageAsync(String id, final ApiCallback<Image> _callback) throws ApiException {

        okhttp3.Call localVarCall = getImageValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Image>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getLocation
     * @param id Unique identifier of the resource (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLocationCall(String id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/locations/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLocationValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getLocation(Async)");
        }
        

        okhttp3.Call localVarCall = getLocationCall(id, _callback);
        return localVarCall;

    }

    /**
     * 
     * Retrieves the location with the given id. 
     * @param id Unique identifier of the resource (required)
     * @return Location
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK  </td><td>  -  </td></tr>
     </table>
     */
    public Location getLocation(String id) throws ApiException {
        ApiResponse<Location> localVarResp = getLocationWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves the location with the given id. 
     * @param id Unique identifier of the resource (required)
     * @return ApiResponse&lt;Location&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Location> getLocationWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = getLocationValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Location>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves the location with the given id. 
     * @param id Unique identifier of the resource (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLocationAsync(String id, final ApiCallback<Location> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLocationValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Location>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getVM
     * @param id Unique identifier of the resource (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVMCall(String id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/vm/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getVMValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getVM(Async)");
        }
        

        okhttp3.Call localVarCall = getVMCall(id, _callback);
        return localVarCall;

    }

    /**
     * 
     * Finds the virtual machine identified by the given id parameter
     * @param id Unique identifier of the resource (required)
     * @return VirtualMachine
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public VirtualMachine getVM(String id) throws ApiException {
        ApiResponse<VirtualMachine> localVarResp = getVMWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Finds the virtual machine identified by the given id parameter
     * @param id Unique identifier of the resource (required)
     * @return ApiResponse&lt;VirtualMachine&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VirtualMachine> getVMWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = getVMValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<VirtualMachine>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Finds the virtual machine identified by the given id parameter
     * @param id Unique identifier of the resource (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVMAsync(String id, final ApiCallback<VirtualMachine> _callback) throws ApiException {

        okhttp3.Call localVarCall = getVMValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<VirtualMachine>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
