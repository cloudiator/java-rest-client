/*
 * Cloudiator REST Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 * Contact: daniel.baur@uni-ulm.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.cloudiator.rest.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.io.Serializable;

/**
 * NodeAllOf
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2019-11-26T14:14:48.729+01:00[Europe/Berlin]")
public class NodeAllOf implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_ORIGIN_ID = "originId";
  @SerializedName(SERIALIZED_NAME_ORIGIN_ID)
  private String originId;

  public static final String SERIALIZED_NAME_USER_ID = "userId";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  private String userId;

  /**
   * The type of this node. 
   */
  @JsonAdapter(NodeTypeEnum.Adapter.class)
  public enum NodeTypeEnum {
    UNKNOWN_TYPE("UNKNOWN_TYPE"),
    
    VM("VM"),
    
    BYON("BYON"),
    
    CONTAINER("CONTAINER"),
    
    FAAS("FAAS");

    private String value;

    NodeTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static NodeTypeEnum fromValue(String value) {
      for (NodeTypeEnum b : NodeTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<NodeTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final NodeTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public NodeTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return NodeTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_NODE_TYPE = "nodeType";
  @SerializedName(SERIALIZED_NAME_NODE_TYPE)
  private NodeTypeEnum nodeType;

  /**
   * The state the node is currently in. 
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    PENDING("PENDING"),
    
    RUNNING("RUNNING"),
    
    ERROR("ERROR"),
    
    DELETED("DELETED");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;


  public NodeAllOf id(String id) {
    
    this.id = id;
    return this;
  }

   /**
   * Unique identifier of this node. 
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Unique identifier of this node. ")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    this.id = id;
  }


  public NodeAllOf originId(String originId) {
    
    this.originId = originId;
    return this;
  }

   /**
   * Original id of this node. Is present of the node was created e.g. at a cloud provider. 
   * @return originId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Original id of this node. Is present of the node was created e.g. at a cloud provider. ")

  public String getOriginId() {
    return originId;
  }


  public void setOriginId(String originId) {
    this.originId = originId;
  }


  public NodeAllOf userId(String userId) {
    
    this.userId = userId;
    return this;
  }

   /**
   * User id of the owner of this node. 
   * @return userId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "User id of the owner of this node. ")

  public String getUserId() {
    return userId;
  }


  public void setUserId(String userId) {
    this.userId = userId;
  }


  public NodeAllOf nodeType(NodeTypeEnum nodeType) {
    
    this.nodeType = nodeType;
    return this;
  }

   /**
   * The type of this node. 
   * @return nodeType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The type of this node. ")

  public NodeTypeEnum getNodeType() {
    return nodeType;
  }


  public void setNodeType(NodeTypeEnum nodeType) {
    this.nodeType = nodeType;
  }


  public NodeAllOf state(StateEnum state) {
    
    this.state = state;
    return this;
  }

   /**
   * The state the node is currently in. 
   * @return state
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The state the node is currently in. ")

  public StateEnum getState() {
    return state;
  }


  public void setState(StateEnum state) {
    this.state = state;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NodeAllOf nodeAllOf = (NodeAllOf) o;
    return Objects.equals(this.id, nodeAllOf.id) &&
        Objects.equals(this.originId, nodeAllOf.originId) &&
        Objects.equals(this.userId, nodeAllOf.userId) &&
        Objects.equals(this.nodeType, nodeAllOf.nodeType) &&
        Objects.equals(this.state, nodeAllOf.state);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, originId, userId, nodeType, state);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NodeAllOf {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    originId: ").append(toIndentedString(originId)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    nodeType: ").append(toIndentedString(nodeType)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

