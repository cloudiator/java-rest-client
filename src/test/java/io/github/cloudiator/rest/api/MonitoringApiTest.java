/*
 * Cloudiator REST Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 * Contact: daniel.baur@uni-ulm.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.cloudiator.rest.api;

import io.github.cloudiator.rest.ApiException;
import io.github.cloudiator.rest.model.Monitor;
import io.github.cloudiator.rest.model.MonitoringTarget;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for MonitoringApi
 */
@Ignore
public class MonitoringApiTest {

    private final MonitoringApi api = new MonitoringApi();

    
    /**
     * 
     *
     * Creates a monitor 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addMonitorTest() throws ApiException {
        Monitor monitor = null;
        Monitor response = api.addMonitor(monitor);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Deletes the monitor identified by the given metric name. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteMonitorTest() throws ApiException {
        String metric = null;
        MonitoringTarget target = null;
        api.deleteMonitor(metric, target);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Returns all monitors visible to the user 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findMonitorsTest() throws ApiException {
        List<Monitor> response = api.findMonitors();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieves the monitor with the given metric name 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getMonitorTest() throws ApiException {
        String metric = null;
        MonitoringTarget target = null;
        Monitor response = api.getMonitor(metric, target);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Updating a monitor 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateMonitorTest() throws ApiException {
        String metric = null;
        Monitor monitor = null;
        Monitor response = api.updateMonitor(metric, monitor);

        // TODO: test validations
    }
    
}
