/*
 * Cloudiator REST Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 * Contact: daniel.baur@uni-ulm.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.cloudiator.rest.api;

import io.github.cloudiator.rest.ApiException;
import io.github.cloudiator.rest.model.Cloud;
import io.github.cloudiator.rest.model.Error;
import io.github.cloudiator.rest.model.Function;
import io.github.cloudiator.rest.model.Hardware;
import io.github.cloudiator.rest.model.Image;
import io.github.cloudiator.rest.model.Location;
import io.github.cloudiator.rest.model.NewCloud;
import io.github.cloudiator.rest.model.Queue;
import io.github.cloudiator.rest.model.VirtualMachine;
import io.github.cloudiator.rest.model.VirtualMachineRequest;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CloudApi
 */
@Ignore
public class CloudApiTest {

    private final CloudApi api = new CloudApi();

    
    /**
     * 
     *
     * Creates a new cloud.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addCloudTest() throws ApiException {
        NewCloud cloud = null;
        Cloud response = api.addCloud(cloud);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Creates a new virtual machine request
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addVMTest() throws ApiException {
        VirtualMachineRequest virtualMachineRequest = null;
        Queue response = api.addVM(virtualMachineRequest);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Deletes the cloud identified by the given id paramater. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteCloudTest() throws ApiException {
        String id = null;
        api.deleteCloud(id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Gets the status of the discovery engine 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void discoveryStatusTest() throws ApiException {
        Map<String, String> response = api.discoveryStatus();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Updates a specific hardware 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void editHardwareTest() throws ApiException {
        String id = null;
        Hardware hardware = null;
        Hardware response = api.editHardware(id, hardware);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Updates a specific image 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void editImageTest() throws ApiException {
        String id = null;
        Image image = null;
        Image response = api.editImage(id, image);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Updates a specific location 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void editLocationTest() throws ApiException {
        String id = null;
        Location location = null;
        Location response = api.editLocation(id, location);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Returns the cloud identified by the given id parameter 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findCloudTest() throws ApiException {
        String id = null;
        Cloud response = api.findCloud(id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Returns all clouds from the system that the user has access to 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findCloudsTest() throws ApiException {
        List<Cloud> response = api.findClouds();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Finds all functions the user has access to
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findFunctionsTest() throws ApiException {
        List<Function> response = api.findFunctions();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Returns all hardware visible to the user 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findHardwareTest() throws ApiException {
        String cloudId = null;
        List<Hardware> response = api.findHardware(cloudId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Returns all images visable to the user 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findImagesTest() throws ApiException {
        String cloudId = null;
        List<Image> response = api.findImages(cloudId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Returns all locations visible to the user 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findLocationsTest() throws ApiException {
        String cloudId = null;
        List<Location> response = api.findLocations(cloudId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Finds all virtual machines the user has access to
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findVMsTest() throws ApiException {
        String cloudId = null;
        List<VirtualMachine> response = api.findVMs(cloudId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Finds the function identified by the given id parameter
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFunctionTest() throws ApiException {
        String id = null;
        Function response = api.getFunction(id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieves the hardware with the given id. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getHardwareTest() throws ApiException {
        String id = null;
        Hardware response = api.getHardware(id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieves the image with the given id. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getImageTest() throws ApiException {
        String id = null;
        Image response = api.getImage(id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieves the location with the given id. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getLocationTest() throws ApiException {
        String id = null;
        Location response = api.getLocation(id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Finds the virtual machine identified by the given id parameter
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getVMTest() throws ApiException {
        String id = null;
        VirtualMachine response = api.getVM(id);

        // TODO: test validations
    }
    
}
