/*
 * Cloudiator REST Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 * Contact: daniel.baur@uni-ulm.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.cloudiator.rest.api;

import io.github.cloudiator.rest.ApiCallback;
import io.github.cloudiator.rest.ApiClient;
import io.github.cloudiator.rest.ApiException;
import io.github.cloudiator.rest.ApiResponse;
import io.github.cloudiator.rest.Configuration;
import io.github.cloudiator.rest.Pair;
import io.github.cloudiator.rest.ProgressRequestBody;
import io.github.cloudiator.rest.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.github.cloudiator.rest.model.NodeCandidate;
import io.github.cloudiator.rest.model.NodeRequirements;
import io.github.cloudiator.rest.model.Queue;
import io.github.cloudiator.rest.model.Requirement;
import io.github.cloudiator.rest.model.Solution;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MatchmakingApi {
    private ApiClient localVarApiClient;

    public MatchmakingApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MatchmakingApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for findNodeCandidates
     * @param nodeRequirements Node Request  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> ACCEPTED </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call findNodeCandidatesCall(List<Requirement> nodeRequirements, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = nodeRequirements;

        // create path and map variables
        String localVarPath = "/nodeCandidates";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call findNodeCandidatesValidateBeforeCall(List<Requirement> nodeRequirements, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = findNodeCandidatesCall(nodeRequirements, _callback);
        return localVarCall;

    }

    /**
     * 
     * Returns possible node candidates. 
     * @param nodeRequirements Node Request  (optional)
     * @return List&lt;NodeCandidate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> ACCEPTED </td><td>  -  </td></tr>
     </table>
     */
    public List<NodeCandidate> findNodeCandidates(List<Requirement> nodeRequirements) throws ApiException {
        ApiResponse<List<NodeCandidate>> localVarResp = findNodeCandidatesWithHttpInfo(nodeRequirements);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns possible node candidates. 
     * @param nodeRequirements Node Request  (optional)
     * @return ApiResponse&lt;List&lt;NodeCandidate&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> ACCEPTED </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<NodeCandidate>> findNodeCandidatesWithHttpInfo(List<Requirement> nodeRequirements) throws ApiException {
        okhttp3.Call localVarCall = findNodeCandidatesValidateBeforeCall(nodeRequirements, null);
        Type localVarReturnType = new TypeToken<List<NodeCandidate>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns possible node candidates. 
     * @param nodeRequirements Node Request  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> ACCEPTED </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call findNodeCandidatesAsync(List<Requirement> nodeRequirements, final ApiCallback<List<NodeCandidate>> _callback) throws ApiException {

        okhttp3.Call localVarCall = findNodeCandidatesValidateBeforeCall(nodeRequirements, _callback);
        Type localVarReturnType = new TypeToken<List<NodeCandidate>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNodeCandidate
     * @param id Unique identifier of the resource (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The node candidate identified with the id  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNodeCandidateCall(String id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nodeCandidates/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNodeCandidateValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getNodeCandidate(Async)");
        }
        

        okhttp3.Call localVarCall = getNodeCandidateCall(id, _callback);
        return localVarCall;

    }

    /**
     * 
     * Returns the node candidate with the given id if it exists. 
     * @param id Unique identifier of the resource (required)
     * @return NodeCandidate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The node candidate identified with the id  </td><td>  -  </td></tr>
     </table>
     */
    public NodeCandidate getNodeCandidate(String id) throws ApiException {
        ApiResponse<NodeCandidate> localVarResp = getNodeCandidateWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns the node candidate with the given id if it exists. 
     * @param id Unique identifier of the resource (required)
     * @return ApiResponse&lt;NodeCandidate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The node candidate identified with the id  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NodeCandidate> getNodeCandidateWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = getNodeCandidateValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<NodeCandidate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns the node candidate with the given id if it exists. 
     * @param id Unique identifier of the resource (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The node candidate identified with the id  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNodeCandidateAsync(String id, final ApiCallback<NodeCandidate> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNodeCandidateValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<NodeCandidate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSolution
     * @param id Unique identifier of the resource (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The solution identified with the id  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSolutionCall(String id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/solution/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSolutionValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getSolution(Async)");
        }
        

        okhttp3.Call localVarCall = getSolutionCall(id, _callback);
        return localVarCall;

    }

    /**
     * 
     * Returns a solution of the matchmaking process (if it is still available) 
     * @param id Unique identifier of the resource (required)
     * @return Solution
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The solution identified with the id  </td><td>  -  </td></tr>
     </table>
     */
    public Solution getSolution(String id) throws ApiException {
        ApiResponse<Solution> localVarResp = getSolutionWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns a solution of the matchmaking process (if it is still available) 
     * @param id Unique identifier of the resource (required)
     * @return ApiResponse&lt;Solution&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The solution identified with the id  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Solution> getSolutionWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = getSolutionValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Solution>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns a solution of the matchmaking process (if it is still available) 
     * @param id Unique identifier of the resource (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The solution identified with the id  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSolutionAsync(String id, final ApiCallback<Solution> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSolutionValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Solution>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for solveMatchmaking
     * @param nodeRequirements The requirements with respect to nodes (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> ACCEPTED </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call solveMatchmakingCall(NodeRequirements nodeRequirements, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = nodeRequirements;

        // create path and map variables
        String localVarPath = "/matchmaking";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call solveMatchmakingValidateBeforeCall(NodeRequirements nodeRequirements, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'nodeRequirements' is set
        if (nodeRequirements == null) {
            throw new ApiException("Missing the required parameter 'nodeRequirements' when calling solveMatchmaking(Async)");
        }
        

        okhttp3.Call localVarCall = solveMatchmakingCall(nodeRequirements, _callback);
        return localVarCall;

    }

    /**
     * 
     * Solves a matchmaking problem
     * @param nodeRequirements The requirements with respect to nodes (required)
     * @return Queue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> ACCEPTED </td><td>  -  </td></tr>
     </table>
     */
    public Queue solveMatchmaking(NodeRequirements nodeRequirements) throws ApiException {
        ApiResponse<Queue> localVarResp = solveMatchmakingWithHttpInfo(nodeRequirements);
        return localVarResp.getData();
    }

    /**
     * 
     * Solves a matchmaking problem
     * @param nodeRequirements The requirements with respect to nodes (required)
     * @return ApiResponse&lt;Queue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> ACCEPTED </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Queue> solveMatchmakingWithHttpInfo(NodeRequirements nodeRequirements) throws ApiException {
        okhttp3.Call localVarCall = solveMatchmakingValidateBeforeCall(nodeRequirements, null);
        Type localVarReturnType = new TypeToken<Queue>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Solves a matchmaking problem
     * @param nodeRequirements The requirements with respect to nodes (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> ACCEPTED </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call solveMatchmakingAsync(NodeRequirements nodeRequirements, final ApiCallback<Queue> _callback) throws ApiException {

        okhttp3.Call localVarCall = solveMatchmakingValidateBeforeCall(nodeRequirements, _callback);
        Type localVarReturnType = new TypeToken<Queue>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
