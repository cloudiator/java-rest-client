/*
 * Cloudiator REST Api
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.2.0
 * Contact: daniel.baur@uni-ulm.de
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.github.cloudiator.rest.api;

import io.github.cloudiator.rest.ApiException;
import io.github.cloudiator.rest.model.NodeCandidate;
import io.github.cloudiator.rest.model.NodeRequirements;
import io.github.cloudiator.rest.model.Queue;
import io.github.cloudiator.rest.model.Requirement;
import io.github.cloudiator.rest.model.Solution;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for MatchmakingApi
 */
@Ignore
public class MatchmakingApiTest {

    private final MatchmakingApi api = new MatchmakingApi();

    
    /**
     * 
     *
     * Returns possible node candidates. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findNodeCandidatesTest() throws ApiException {
        List<Requirement> nodeRequirements = null;
        List<NodeCandidate> response = api.findNodeCandidates(nodeRequirements);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Returns the node candidate with the given id if it exists. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNodeCandidateTest() throws ApiException {
        String id = null;
        NodeCandidate response = api.getNodeCandidate(id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Returns a solution of the matchmaking process (if it is still available) 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSolutionTest() throws ApiException {
        String id = null;
        Solution response = api.getSolution(id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Solves a matchmaking problem
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void solveMatchmakingTest() throws ApiException {
        NodeRequirements nodeRequirements = null;
        Queue response = api.solveMatchmaking(nodeRequirements);

        // TODO: test validations
    }
    
}
