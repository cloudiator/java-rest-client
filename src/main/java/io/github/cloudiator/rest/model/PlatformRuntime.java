/*
 * Cloudiator REST Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 * Contact: daniel.baur@uni-ulm.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.cloudiator.rest.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.github.cloudiator.rest.model.NewPlatformRuntime;
import io.github.cloudiator.rest.model.PlatformRuntimeAllOf;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.io.Serializable;

/**
 * Repesents a PaaS environemnt to run an component 
 */
@ApiModel(description = "Repesents a PaaS environemnt to run an component ")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2020-01-13T10:47:33.672+01:00[Europe/Berlin]")
public class PlatformRuntime implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  /**
   * the specific runtime language
   */
  @JsonAdapter(LanguageEnum.Adapter.class)
  public enum LanguageEnum {
    PHP("PHP"),
    
    JAVA("JAVA"),
    
    RUBY("RUBY"),
    
    PYTHON("PYTHON");

    private String value;

    LanguageEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LanguageEnum fromValue(String value) {
      for (LanguageEnum b : LanguageEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LanguageEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LanguageEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LanguageEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LanguageEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_LANGUAGE = "language";
  @SerializedName(SERIALIZED_NAME_LANGUAGE)
  private LanguageEnum language;

  public static final String SERIALIZED_NAME_LANGUAGE_VERSION = "languageVersion";
  @SerializedName(SERIALIZED_NAME_LANGUAGE_VERSION)
  private Double languageVersion;

  /**
   * specifies the runtime type
   */
  @JsonAdapter(RuntimeTypeEnum.Adapter.class)
  public enum RuntimeTypeEnum {
    STANDALONE("standalone"),
    
    SERVER("server");

    private String value;

    RuntimeTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RuntimeTypeEnum fromValue(String value) {
      for (RuntimeTypeEnum b : RuntimeTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RuntimeTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RuntimeTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RuntimeTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RuntimeTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_RUNTIME_TYPE = "runtimeType";
  @SerializedName(SERIALIZED_NAME_RUNTIME_TYPE)
  private RuntimeTypeEnum runtimeType;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private Double version;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;


  public PlatformRuntime name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * human readable name
   * @return name
  **/
  @ApiModelProperty(required = true, value = "human readable name")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public PlatformRuntime language(LanguageEnum language) {
    
    this.language = language;
    return this;
  }

   /**
   * the specific runtime language
   * @return language
  **/
  @ApiModelProperty(required = true, value = "the specific runtime language")

  public LanguageEnum getLanguage() {
    return language;
  }


  public void setLanguage(LanguageEnum language) {
    this.language = language;
  }


  public PlatformRuntime languageVersion(Double languageVersion) {
    
    this.languageVersion = languageVersion;
    return this;
  }

   /**
   * language version number
   * @return languageVersion
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "11.0", value = "language version number")

  public Double getLanguageVersion() {
    return languageVersion;
  }


  public void setLanguageVersion(Double languageVersion) {
    this.languageVersion = languageVersion;
  }


  public PlatformRuntime runtimeType(RuntimeTypeEnum runtimeType) {
    
    this.runtimeType = runtimeType;
    return this;
  }

   /**
   * specifies the runtime type
   * @return runtimeType
  **/
  @ApiModelProperty(required = true, value = "specifies the runtime type")

  public RuntimeTypeEnum getRuntimeType() {
    return runtimeType;
  }


  public void setRuntimeType(RuntimeTypeEnum runtimeType) {
    this.runtimeType = runtimeType;
  }


  public PlatformRuntime version(Double version) {
    
    this.version = version;
    return this;
  }

   /**
   * the version of the specified type
   * @return version
  **/
  @ApiModelProperty(example = "2.0", required = true, value = "the version of the specified type")

  public Double getVersion() {
    return version;
  }


  public void setVersion(Double version) {
    this.version = version;
  }


  public PlatformRuntime id(String id) {
    
    this.id = id;
    return this;
  }

   /**
   * Unique identifier for the hardwareRuntime
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1a79a4d60de6718e8e5b326e33812345/example.p1", value = "Unique identifier for the hardwareRuntime")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    this.id = id;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PlatformRuntime platformRuntime = (PlatformRuntime) o;
    return Objects.equals(this.name, platformRuntime.name) &&
        Objects.equals(this.language, platformRuntime.language) &&
        Objects.equals(this.languageVersion, platformRuntime.languageVersion) &&
        Objects.equals(this.runtimeType, platformRuntime.runtimeType) &&
        Objects.equals(this.version, platformRuntime.version) &&
        Objects.equals(this.id, platformRuntime.id);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, language, languageVersion, runtimeType, version, id);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PlatformRuntime {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    language: ").append(toIndentedString(language)).append("\n");
    sb.append("    languageVersion: ").append(toIndentedString(languageVersion)).append("\n");
    sb.append("    runtimeType: ").append(toIndentedString(runtimeType)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

