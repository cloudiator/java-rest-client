/*
 * Cloudiator REST Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 * Contact: daniel.baur@uni-ulm.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.cloudiator.rest.api;

import io.github.cloudiator.rest.ApiCallback;
import io.github.cloudiator.rest.ApiClient;
import io.github.cloudiator.rest.ApiException;
import io.github.cloudiator.rest.ApiResponse;
import io.github.cloudiator.rest.Configuration;
import io.github.cloudiator.rest.Pair;
import io.github.cloudiator.rest.ProgressRequestBody;
import io.github.cloudiator.rest.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.github.cloudiator.rest.model.Error;
import io.github.cloudiator.rest.model.NewPlatform;
import io.github.cloudiator.rest.model.NewPlatformEnvironment;
import io.github.cloudiator.rest.model.NewPlatformHardware;
import io.github.cloudiator.rest.model.NewPlatformRuntime;
import io.github.cloudiator.rest.model.Platform;
import io.github.cloudiator.rest.model.PlatformEnvironment;
import io.github.cloudiator.rest.model.PlatformHardware;
import io.github.cloudiator.rest.model.PlatformRuntime;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PlatformApi {
    private ApiClient localVarApiClient;

    public PlatformApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PlatformApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for addPlatform
     * @param platform Platform to add (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization for this action is missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden action </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected Error occured </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Server temporary not available </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addPlatformCall(NewPlatform platform, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = platform;

        // create path and map variables
        String localVarPath = "/platform";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "code", "message", 
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addPlatformValidateBeforeCall(NewPlatform platform, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'platform' is set
        if (platform == null) {
            throw new ApiException("Missing the required parameter 'platform' when calling addPlatform(Async)");
        }
        

        okhttp3.Call localVarCall = addPlatformCall(platform, _callback);
        return localVarCall;

    }

    /**
     * 
     * Creates a new platform.
     * @param platform Platform to add (required)
     * @return Platform
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization for this action is missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden action </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected Error occured </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Server temporary not available </td><td>  -  </td></tr>
     </table>
     */
    public Platform addPlatform(NewPlatform platform) throws ApiException {
        ApiResponse<Platform> localVarResp = addPlatformWithHttpInfo(platform);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates a new platform.
     * @param platform Platform to add (required)
     * @return ApiResponse&lt;Platform&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization for this action is missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden action </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected Error occured </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Server temporary not available </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Platform> addPlatformWithHttpInfo(NewPlatform platform) throws ApiException {
        okhttp3.Call localVarCall = addPlatformValidateBeforeCall(platform, null);
        Type localVarReturnType = new TypeToken<Platform>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates a new platform.
     * @param platform Platform to add (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization for this action is missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden action </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected Error occured </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Server temporary not available </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addPlatformAsync(NewPlatform platform, final ApiCallback<Platform> _callback) throws ApiException {

        okhttp3.Call localVarCall = addPlatformValidateBeforeCall(platform, _callback);
        Type localVarReturnType = new TypeToken<Platform>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for addPlatformEnvironment
     * @param platformEnvironment PlatformEnvironment to be created  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization for this action is missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden action </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected Error occured </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Server temporary not available </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addPlatformEnvironmentCall(NewPlatformEnvironment platformEnvironment, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = platformEnvironment;

        // create path and map variables
        String localVarPath = "/platformEnvironment";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "code", "message", 
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addPlatformEnvironmentValidateBeforeCall(NewPlatformEnvironment platformEnvironment, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'platformEnvironment' is set
        if (platformEnvironment == null) {
            throw new ApiException("Missing the required parameter 'platformEnvironment' when calling addPlatformEnvironment(Async)");
        }
        

        okhttp3.Call localVarCall = addPlatformEnvironmentCall(platformEnvironment, _callback);
        return localVarCall;

    }

    /**
     * 
     * Creates a new PlatformEnvironment 
     * @param platformEnvironment PlatformEnvironment to be created  (required)
     * @return PlatformEnvironment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization for this action is missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden action </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected Error occured </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Server temporary not available </td><td>  -  </td></tr>
     </table>
     */
    public PlatformEnvironment addPlatformEnvironment(NewPlatformEnvironment platformEnvironment) throws ApiException {
        ApiResponse<PlatformEnvironment> localVarResp = addPlatformEnvironmentWithHttpInfo(platformEnvironment);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates a new PlatformEnvironment 
     * @param platformEnvironment PlatformEnvironment to be created  (required)
     * @return ApiResponse&lt;PlatformEnvironment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization for this action is missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden action </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected Error occured </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Server temporary not available </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PlatformEnvironment> addPlatformEnvironmentWithHttpInfo(NewPlatformEnvironment platformEnvironment) throws ApiException {
        okhttp3.Call localVarCall = addPlatformEnvironmentValidateBeforeCall(platformEnvironment, null);
        Type localVarReturnType = new TypeToken<PlatformEnvironment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates a new PlatformEnvironment 
     * @param platformEnvironment PlatformEnvironment to be created  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization for this action is missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden action </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected Error occured </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Server temporary not available </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addPlatformEnvironmentAsync(NewPlatformEnvironment platformEnvironment, final ApiCallback<PlatformEnvironment> _callback) throws ApiException {

        okhttp3.Call localVarCall = addPlatformEnvironmentValidateBeforeCall(platformEnvironment, _callback);
        Type localVarReturnType = new TypeToken<PlatformEnvironment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for addPlatformHardware
     * @param platformHardware PlatformHardware to be created  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization for this action is missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden action </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected Error occured </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Server temporary not available </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addPlatformHardwareCall(NewPlatformHardware platformHardware, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = platformHardware;

        // create path and map variables
        String localVarPath = "/platformHardware";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "code", "message", 
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addPlatformHardwareValidateBeforeCall(NewPlatformHardware platformHardware, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'platformHardware' is set
        if (platformHardware == null) {
            throw new ApiException("Missing the required parameter 'platformHardware' when calling addPlatformHardware(Async)");
        }
        

        okhttp3.Call localVarCall = addPlatformHardwareCall(platformHardware, _callback);
        return localVarCall;

    }

    /**
     * 
     * Creates a new PlatformHardware 
     * @param platformHardware PlatformHardware to be created  (required)
     * @return PlatformHardware
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization for this action is missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden action </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected Error occured </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Server temporary not available </td><td>  -  </td></tr>
     </table>
     */
    public PlatformHardware addPlatformHardware(NewPlatformHardware platformHardware) throws ApiException {
        ApiResponse<PlatformHardware> localVarResp = addPlatformHardwareWithHttpInfo(platformHardware);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates a new PlatformHardware 
     * @param platformHardware PlatformHardware to be created  (required)
     * @return ApiResponse&lt;PlatformHardware&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization for this action is missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden action </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected Error occured </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Server temporary not available </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PlatformHardware> addPlatformHardwareWithHttpInfo(NewPlatformHardware platformHardware) throws ApiException {
        okhttp3.Call localVarCall = addPlatformHardwareValidateBeforeCall(platformHardware, null);
        Type localVarReturnType = new TypeToken<PlatformHardware>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates a new PlatformHardware 
     * @param platformHardware PlatformHardware to be created  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization for this action is missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden action </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected Error occured </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Server temporary not available </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addPlatformHardwareAsync(NewPlatformHardware platformHardware, final ApiCallback<PlatformHardware> _callback) throws ApiException {

        okhttp3.Call localVarCall = addPlatformHardwareValidateBeforeCall(platformHardware, _callback);
        Type localVarReturnType = new TypeToken<PlatformHardware>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for addPlatformRuntime
     * @param platformRuntime PlatformRuntime to be created  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization for this action is missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden action </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected Error occured </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Server temporary not available </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addPlatformRuntimeCall(NewPlatformRuntime platformRuntime, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = platformRuntime;

        // create path and map variables
        String localVarPath = "/platformRuntime";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "code", "message", 
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addPlatformRuntimeValidateBeforeCall(NewPlatformRuntime platformRuntime, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'platformRuntime' is set
        if (platformRuntime == null) {
            throw new ApiException("Missing the required parameter 'platformRuntime' when calling addPlatformRuntime(Async)");
        }
        

        okhttp3.Call localVarCall = addPlatformRuntimeCall(platformRuntime, _callback);
        return localVarCall;

    }

    /**
     * 
     * Creates a new PlatformRuntime 
     * @param platformRuntime PlatformRuntime to be created  (required)
     * @return PlatformRuntime
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization for this action is missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden action </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected Error occured </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Server temporary not available </td><td>  -  </td></tr>
     </table>
     */
    public PlatformRuntime addPlatformRuntime(NewPlatformRuntime platformRuntime) throws ApiException {
        ApiResponse<PlatformRuntime> localVarResp = addPlatformRuntimeWithHttpInfo(platformRuntime);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates a new PlatformRuntime 
     * @param platformRuntime PlatformRuntime to be created  (required)
     * @return ApiResponse&lt;PlatformRuntime&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization for this action is missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden action </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected Error occured </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Server temporary not available </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PlatformRuntime> addPlatformRuntimeWithHttpInfo(NewPlatformRuntime platformRuntime) throws ApiException {
        okhttp3.Call localVarCall = addPlatformRuntimeValidateBeforeCall(platformRuntime, null);
        Type localVarReturnType = new TypeToken<PlatformRuntime>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates a new PlatformRuntime 
     * @param platformRuntime PlatformRuntime to be created  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization for this action is missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden action </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected Error occured </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Server temporary not available </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addPlatformRuntimeAsync(NewPlatformRuntime platformRuntime, final ApiCallback<PlatformRuntime> _callback) throws ApiException {

        okhttp3.Call localVarCall = addPlatformRuntimeValidateBeforeCall(platformRuntime, _callback);
        Type localVarReturnType = new TypeToken<PlatformRuntime>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deletePlatform
     * @param id Unique identifier of the resource (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization for this action is missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden action </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected Error occured </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Server temporary not available </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePlatformCall(String id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "code", "message"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deletePlatformValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deletePlatform(Async)");
        }
        

        okhttp3.Call localVarCall = deletePlatformCall(id, _callback);
        return localVarCall;

    }

    /**
     * 
     * Deletes the platform identified by the given id paramater. 
     * @param id Unique identifier of the resource (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization for this action is missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden action </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected Error occured </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Server temporary not available </td><td>  -  </td></tr>
     </table>
     */
    public void deletePlatform(String id) throws ApiException {
        deletePlatformWithHttpInfo(id);
    }

    /**
     * 
     * Deletes the platform identified by the given id paramater. 
     * @param id Unique identifier of the resource (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization for this action is missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden action </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected Error occured </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Server temporary not available </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deletePlatformWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = deletePlatformValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes the platform identified by the given id paramater. 
     * @param id Unique identifier of the resource (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization for this action is missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden action </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Item not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected Error occured </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Server temporary not available </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePlatformAsync(String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deletePlatformValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for findPlatform
     * @param id Unique identifier of the resource (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The platform identified by the id  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization for this action is missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden action </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected Error occured </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Server temporary not available </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call findPlatformCall(String id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "code", "message", 
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call findPlatformValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling findPlatform(Async)");
        }
        

        okhttp3.Call localVarCall = findPlatformCall(id, _callback);
        return localVarCall;

    }

    /**
     * 
     * Returns the platform identified by the given id parameter 
     * @param id Unique identifier of the resource (required)
     * @return Platform
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The platform identified by the id  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization for this action is missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden action </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected Error occured </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Server temporary not available </td><td>  -  </td></tr>
     </table>
     */
    public Platform findPlatform(String id) throws ApiException {
        ApiResponse<Platform> localVarResp = findPlatformWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns the platform identified by the given id parameter 
     * @param id Unique identifier of the resource (required)
     * @return ApiResponse&lt;Platform&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The platform identified by the id  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization for this action is missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden action </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected Error occured </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Server temporary not available </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Platform> findPlatformWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = findPlatformValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Platform>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns the platform identified by the given id parameter 
     * @param id Unique identifier of the resource (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The platform identified by the id  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization for this action is missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden action </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected Error occured </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Server temporary not available </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call findPlatformAsync(String id, final ApiCallback<Platform> _callback) throws ApiException {

        okhttp3.Call localVarCall = findPlatformValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Platform>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for findPlatformEnvironment
     * @param id Unique identifier of the resource (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization for this action is missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden action </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected Error occured </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Server temporary not available </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call findPlatformEnvironmentCall(String id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platformEnvironment/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "code", "message", 
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call findPlatformEnvironmentValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling findPlatformEnvironment(Async)");
        }
        

        okhttp3.Call localVarCall = findPlatformEnvironmentCall(id, _callback);
        return localVarCall;

    }

    /**
     * 
     * Returns the PlatformEnvironment identified by the id parameter. 
     * @param id Unique identifier of the resource (required)
     * @return PlatformEnvironment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization for this action is missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden action </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected Error occured </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Server temporary not available </td><td>  -  </td></tr>
     </table>
     */
    public PlatformEnvironment findPlatformEnvironment(String id) throws ApiException {
        ApiResponse<PlatformEnvironment> localVarResp = findPlatformEnvironmentWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns the PlatformEnvironment identified by the id parameter. 
     * @param id Unique identifier of the resource (required)
     * @return ApiResponse&lt;PlatformEnvironment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization for this action is missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden action </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected Error occured </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Server temporary not available </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PlatformEnvironment> findPlatformEnvironmentWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = findPlatformEnvironmentValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<PlatformEnvironment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns the PlatformEnvironment identified by the id parameter. 
     * @param id Unique identifier of the resource (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization for this action is missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden action </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected Error occured </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Server temporary not available </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call findPlatformEnvironmentAsync(String id, final ApiCallback<PlatformEnvironment> _callback) throws ApiException {

        okhttp3.Call localVarCall = findPlatformEnvironmentValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<PlatformEnvironment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for findPlatformEnvironments
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization for this action is missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden action </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected Error occured </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Server temporary not available </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call findPlatformEnvironmentsCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platformEnvironment";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "code", "message", 
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call findPlatformEnvironmentsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = findPlatformEnvironmentsCall(_callback);
        return localVarCall;

    }

    /**
     * 
     * Returns all platform environment  visible to the user 
     * @return List&lt;PlatformEnvironment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization for this action is missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden action </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected Error occured </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Server temporary not available </td><td>  -  </td></tr>
     </table>
     */
    public List<PlatformEnvironment> findPlatformEnvironments() throws ApiException {
        ApiResponse<List<PlatformEnvironment>> localVarResp = findPlatformEnvironmentsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * Returns all platform environment  visible to the user 
     * @return ApiResponse&lt;List&lt;PlatformEnvironment&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization for this action is missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden action </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected Error occured </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Server temporary not available </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<PlatformEnvironment>> findPlatformEnvironmentsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = findPlatformEnvironmentsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<PlatformEnvironment>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns all platform environment  visible to the user 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization for this action is missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden action </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected Error occured </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Server temporary not available </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call findPlatformEnvironmentsAsync(final ApiCallback<List<PlatformEnvironment>> _callback) throws ApiException {

        okhttp3.Call localVarCall = findPlatformEnvironmentsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<PlatformEnvironment>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for findPlatformHardware
     * @param id Unique identifier of the resource (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization for this action is missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden action </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected Error occured </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Server temporary not available </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call findPlatformHardwareCall(String id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platformHardware/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "code", "message", 
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call findPlatformHardwareValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling findPlatformHardware(Async)");
        }
        

        okhttp3.Call localVarCall = findPlatformHardwareCall(id, _callback);
        return localVarCall;

    }

    /**
     * 
     * Returns the PlatformHardware identified by the id parameter. 
     * @param id Unique identifier of the resource (required)
     * @return PlatformHardware
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization for this action is missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden action </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected Error occured </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Server temporary not available </td><td>  -  </td></tr>
     </table>
     */
    public PlatformHardware findPlatformHardware(String id) throws ApiException {
        ApiResponse<PlatformHardware> localVarResp = findPlatformHardwareWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns the PlatformHardware identified by the id parameter. 
     * @param id Unique identifier of the resource (required)
     * @return ApiResponse&lt;PlatformHardware&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization for this action is missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden action </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected Error occured </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Server temporary not available </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PlatformHardware> findPlatformHardwareWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = findPlatformHardwareValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<PlatformHardware>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns the PlatformHardware identified by the id parameter. 
     * @param id Unique identifier of the resource (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization for this action is missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden action </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected Error occured </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Server temporary not available </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call findPlatformHardwareAsync(String id, final ApiCallback<PlatformHardware> _callback) throws ApiException {

        okhttp3.Call localVarCall = findPlatformHardwareValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<PlatformHardware>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for findPlatformHardwares
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization for this action is missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden action </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected Error occured </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Server temporary not available </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call findPlatformHardwaresCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platformHardware";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "code", "message", 
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call findPlatformHardwaresValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = findPlatformHardwaresCall(_callback);
        return localVarCall;

    }

    /**
     * 
     * Returns all platform hardware visible to the user 
     * @return List&lt;PlatformHardware&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization for this action is missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden action </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected Error occured </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Server temporary not available </td><td>  -  </td></tr>
     </table>
     */
    public List<PlatformHardware> findPlatformHardwares() throws ApiException {
        ApiResponse<List<PlatformHardware>> localVarResp = findPlatformHardwaresWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * Returns all platform hardware visible to the user 
     * @return ApiResponse&lt;List&lt;PlatformHardware&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization for this action is missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden action </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected Error occured </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Server temporary not available </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<PlatformHardware>> findPlatformHardwaresWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = findPlatformHardwaresValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<PlatformHardware>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns all platform hardware visible to the user 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization for this action is missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden action </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected Error occured </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Server temporary not available </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call findPlatformHardwaresAsync(final ApiCallback<List<PlatformHardware>> _callback) throws ApiException {

        okhttp3.Call localVarCall = findPlatformHardwaresValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<PlatformHardware>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for findPlatformRuntime
     * @param id Unique identifier of the resource (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization for this action is missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden action </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected Error occured </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Server temporary not available </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call findPlatformRuntimeCall(String id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platformRuntime/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "code", "message", 
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call findPlatformRuntimeValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling findPlatformRuntime(Async)");
        }
        

        okhttp3.Call localVarCall = findPlatformRuntimeCall(id, _callback);
        return localVarCall;

    }

    /**
     * 
     * Returns the PlatformRuntime identified by the id parameter. 
     * @param id Unique identifier of the resource (required)
     * @return PlatformRuntime
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization for this action is missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden action </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected Error occured </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Server temporary not available </td><td>  -  </td></tr>
     </table>
     */
    public PlatformRuntime findPlatformRuntime(String id) throws ApiException {
        ApiResponse<PlatformRuntime> localVarResp = findPlatformRuntimeWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns the PlatformRuntime identified by the id parameter. 
     * @param id Unique identifier of the resource (required)
     * @return ApiResponse&lt;PlatformRuntime&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization for this action is missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden action </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected Error occured </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Server temporary not available </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PlatformRuntime> findPlatformRuntimeWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = findPlatformRuntimeValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<PlatformRuntime>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns the PlatformRuntime identified by the id parameter. 
     * @param id Unique identifier of the resource (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization for this action is missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden action </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected Error occured </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Server temporary not available </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call findPlatformRuntimeAsync(String id, final ApiCallback<PlatformRuntime> _callback) throws ApiException {

        okhttp3.Call localVarCall = findPlatformRuntimeValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<PlatformRuntime>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for findPlatformRuntimes
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization for this action is missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden action </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected Error occured </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Server temporary not available </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call findPlatformRuntimesCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platformRuntime";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "code", "message", 
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call findPlatformRuntimesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = findPlatformRuntimesCall(_callback);
        return localVarCall;

    }

    /**
     * 
     * Returns all platform runtime  visible to the user 
     * @return List&lt;PlatformRuntime&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization for this action is missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden action </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected Error occured </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Server temporary not available </td><td>  -  </td></tr>
     </table>
     */
    public List<PlatformRuntime> findPlatformRuntimes() throws ApiException {
        ApiResponse<List<PlatformRuntime>> localVarResp = findPlatformRuntimesWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * Returns all platform runtime  visible to the user 
     * @return ApiResponse&lt;List&lt;PlatformRuntime&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization for this action is missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden action </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected Error occured </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Server temporary not available </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<PlatformRuntime>> findPlatformRuntimesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = findPlatformRuntimesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<PlatformRuntime>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns all platform runtime  visible to the user 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization for this action is missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden action </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected Error occured </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Server temporary not available </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call findPlatformRuntimesAsync(final ApiCallback<List<PlatformRuntime>> _callback) throws ApiException {

        okhttp3.Call localVarCall = findPlatformRuntimesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<PlatformRuntime>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for findPlatforms
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All platforms  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization for this action is missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden action </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected Error occured </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Server temporary not available </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call findPlatformsCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/platform";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "code", "message", 
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call findPlatformsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = findPlatformsCall(_callback);
        return localVarCall;

    }

    /**
     * 
     * Returns all platform from the system that the user has access to 
     * @return List&lt;Platform&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All platforms  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization for this action is missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden action </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected Error occured </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Server temporary not available </td><td>  -  </td></tr>
     </table>
     */
    public List<Platform> findPlatforms() throws ApiException {
        ApiResponse<List<Platform>> localVarResp = findPlatformsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * Returns all platform from the system that the user has access to 
     * @return ApiResponse&lt;List&lt;Platform&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All platforms  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization for this action is missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden action </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected Error occured </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Server temporary not available </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Platform>> findPlatformsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = findPlatformsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<Platform>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns all platform from the system that the user has access to 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All platforms  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authorization for this action is missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden action </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected Error occured </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Server temporary not available </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call findPlatformsAsync(final ApiCallback<List<Platform>> _callback) throws ApiException {

        okhttp3.Call localVarCall = findPlatformsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<Platform>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
