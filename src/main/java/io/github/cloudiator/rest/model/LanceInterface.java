/*
 * Cloudiator REST Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 * Contact: daniel.baur@uni-ulm.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.cloudiator.rest.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.github.cloudiator.rest.model.LanceInterfaceAllOf;
import io.github.cloudiator.rest.model.OperatingSystem;
import io.github.cloudiator.rest.model.TaskInterface;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.io.Serializable;

/**
 * Part of a task. Subtype of TaskInterface. 
 */
@ApiModel(description = "Part of a task. Subtype of TaskInterface. ")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2019-11-26T14:14:48.729+01:00[Europe/Berlin]")
public class LanceInterface extends TaskInterface implements Serializable {
  private static final long serialVersionUID = 1L;

  /**
   * The container type that lance should use. Can be DOCKER to force a docker deployment, NATIVE to force a plain container deployment or BOTH to let the system derive the container type. 
   */
  @JsonAdapter(ContainerTypeEnum.Adapter.class)
  public enum ContainerTypeEnum {
    NATIVE("NATIVE"),
    
    DOCKER("DOCKER"),
    
    BOTH("BOTH");

    private String value;

    ContainerTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ContainerTypeEnum fromValue(String value) {
      for (ContainerTypeEnum b : ContainerTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ContainerTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ContainerTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ContainerTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ContainerTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_CONTAINER_TYPE = "containerType";
  @SerializedName(SERIALIZED_NAME_CONTAINER_TYPE)
  private ContainerTypeEnum containerType;

  public static final String SERIALIZED_NAME_OPERATING_SYSTEM = "operatingSystem";
  @SerializedName(SERIALIZED_NAME_OPERATING_SYSTEM)
  private OperatingSystem operatingSystem;

  public static final String SERIALIZED_NAME_INIT = "init";
  @SerializedName(SERIALIZED_NAME_INIT)
  private String init;

  public static final String SERIALIZED_NAME_PRE_INSTALL = "preInstall";
  @SerializedName(SERIALIZED_NAME_PRE_INSTALL)
  private String preInstall;

  public static final String SERIALIZED_NAME_INSTALL = "install";
  @SerializedName(SERIALIZED_NAME_INSTALL)
  private String install;

  public static final String SERIALIZED_NAME_POST_INSTALL = "postInstall";
  @SerializedName(SERIALIZED_NAME_POST_INSTALL)
  private String postInstall;

  public static final String SERIALIZED_NAME_PRE_START = "preStart";
  @SerializedName(SERIALIZED_NAME_PRE_START)
  private String preStart;

  public static final String SERIALIZED_NAME_START = "start";
  @SerializedName(SERIALIZED_NAME_START)
  private String start;

  public static final String SERIALIZED_NAME_START_DETECTION = "startDetection";
  @SerializedName(SERIALIZED_NAME_START_DETECTION)
  private String startDetection;

  public static final String SERIALIZED_NAME_STOP_DETECTION = "stopDetection";
  @SerializedName(SERIALIZED_NAME_STOP_DETECTION)
  private String stopDetection;

  public static final String SERIALIZED_NAME_POST_START = "postStart";
  @SerializedName(SERIALIZED_NAME_POST_START)
  private String postStart;

  public static final String SERIALIZED_NAME_PRE_STOP = "preStop";
  @SerializedName(SERIALIZED_NAME_PRE_STOP)
  private String preStop;

  public static final String SERIALIZED_NAME_STOP = "stop";
  @SerializedName(SERIALIZED_NAME_STOP)
  private String stop;

  public static final String SERIALIZED_NAME_POST_STOP = "postStop";
  @SerializedName(SERIALIZED_NAME_POST_STOP)
  private String postStop;

  public static final String SERIALIZED_NAME_SHUTDOWN = "shutdown";
  @SerializedName(SERIALIZED_NAME_SHUTDOWN)
  private String shutdown;

  public static final String SERIALIZED_NAME_UPDATE_ACTION = "updateAction";
  @SerializedName(SERIALIZED_NAME_UPDATE_ACTION)
  private String updateAction;


  public LanceInterface containerType(ContainerTypeEnum containerType) {
    
    this.containerType = containerType;
    return this;
  }

   /**
   * The container type that lance should use. Can be DOCKER to force a docker deployment, NATIVE to force a plain container deployment or BOTH to let the system derive the container type. 
   * @return containerType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The container type that lance should use. Can be DOCKER to force a docker deployment, NATIVE to force a plain container deployment or BOTH to let the system derive the container type. ")

  public ContainerTypeEnum getContainerType() {
    return containerType;
  }


  public void setContainerType(ContainerTypeEnum containerType) {
    this.containerType = containerType;
  }


  public LanceInterface operatingSystem(OperatingSystem operatingSystem) {
    
    this.operatingSystem = operatingSystem;
    return this;
  }

   /**
   * Get operatingSystem
   * @return operatingSystem
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OperatingSystem getOperatingSystem() {
    return operatingSystem;
  }


  public void setOperatingSystem(OperatingSystem operatingSystem) {
    this.operatingSystem = operatingSystem;
  }


  public LanceInterface init(String init) {
    
    this.init = init;
    return this;
  }

   /**
   * Initialization action. 
   * @return init
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Initialization action. ")

  public String getInit() {
    return init;
  }


  public void setInit(String init) {
    this.init = init;
  }


  public LanceInterface preInstall(String preInstall) {
    
    this.preInstall = preInstall;
    return this;
  }

   /**
   * Executed before installation action. Can be e.g. used for downloading binaries. 
   * @return preInstall
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Executed before installation action. Can be e.g. used for downloading binaries. ")

  public String getPreInstall() {
    return preInstall;
  }


  public void setPreInstall(String preInstall) {
    this.preInstall = preInstall;
  }


  public LanceInterface install(String install) {
    
    this.install = install;
    return this;
  }

   /**
   * Used for installing the application. 
   * @return install
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Used for installing the application. ")

  public String getInstall() {
    return install;
  }


  public void setInstall(String install) {
    this.install = install;
  }


  public LanceInterface postInstall(String postInstall) {
    
    this.postInstall = postInstall;
    return this;
  }

   /**
   * Used for configuration of the application component. First action where Lance environment variables are set. 
   * @return postInstall
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Used for configuration of the application component. First action where Lance environment variables are set. ")

  public String getPostInstall() {
    return postInstall;
  }


  public void setPostInstall(String postInstall) {
    this.postInstall = postInstall;
  }


  public LanceInterface preStart(String preStart) {
    
    this.preStart = preStart;
    return this;
  }

   /**
   * Called before starting the application. Can be e.g. used for configuration an environment. 
   * @return preStart
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Called before starting the application. Can be e.g. used for configuration an environment. ")

  public String getPreStart() {
    return preStart;
  }


  public void setPreStart(String preStart) {
    this.preStart = preStart;
  }


  public LanceInterface start(String start) {
    
    this.start = start;
    return this;
  }

   /**
   * Starts the component. Needs to return for PlainContainer and not return for Docker. 
   * @return start
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Starts the component. Needs to return for PlainContainer and not return for Docker. ")

  public String getStart() {
    return start;
  }


  public void setStart(String start) {
    this.start = start;
  }


  public LanceInterface startDetection(String startDetection) {
    
    this.startDetection = startDetection;
    return this;
  }

   /**
   * Detects the start of the application. Required if the application does not start instantianous. 
   * @return startDetection
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Detects the start of the application. Required if the application does not start instantianous. ")

  public String getStartDetection() {
    return startDetection;
  }


  public void setStartDetection(String startDetection) {
    this.startDetection = startDetection;
  }


  public LanceInterface stopDetection(String stopDetection) {
    
    this.stopDetection = stopDetection;
    return this;
  }

   /**
   * Checks if the application has stopped. Is periodically checked to detect a crash of the application. 
   * @return stopDetection
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Checks if the application has stopped. Is periodically checked to detect a crash of the application. ")

  public String getStopDetection() {
    return stopDetection;
  }


  public void setStopDetection(String stopDetection) {
    this.stopDetection = stopDetection;
  }


  public LanceInterface postStart(String postStart) {
    
    this.postStart = postStart;
    return this;
  }

   /**
   * Executed after the application has successfully started. 
   * @return postStart
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Executed after the application has successfully started. ")

  public String getPostStart() {
    return postStart;
  }


  public void setPostStart(String postStart) {
    this.postStart = postStart;
  }


  public LanceInterface preStop(String preStop) {
    
    this.preStop = preStop;
    return this;
  }

   /**
   * Called before the application is stopped. 
   * @return preStop
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Called before the application is stopped. ")

  public String getPreStop() {
    return preStop;
  }


  public void setPreStop(String preStop) {
    this.preStop = preStop;
  }


  public LanceInterface stop(String stop) {
    
    this.stop = stop;
    return this;
  }

   /**
   * Stops the application. 
   * @return stop
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Stops the application. ")

  public String getStop() {
    return stop;
  }


  public void setStop(String stop) {
    this.stop = stop;
  }


  public LanceInterface postStop(String postStop) {
    
    this.postStop = postStop;
    return this;
  }

   /**
   * Executed after the application is successfully stopped. 
   * @return postStop
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Executed after the application is successfully stopped. ")

  public String getPostStop() {
    return postStop;
  }


  public void setPostStop(String postStop) {
    this.postStop = postStop;
  }


  public LanceInterface shutdown(String shutdown) {
    
    this.shutdown = shutdown;
    return this;
  }

   /**
   * Executed before the container is shutdown. Can be used to backup state. 
   * @return shutdown
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Executed before the container is shutdown. Can be used to backup state. ")

  public String getShutdown() {
    return shutdown;
  }


  public void setShutdown(String shutdown) {
    this.shutdown = shutdown;
  }


  public LanceInterface updateAction(String updateAction) {
    
    this.updateAction = updateAction;
    return this;
  }

   /**
   * A script that is executed if a new instance of a downstream task is available. 
   * @return updateAction
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A script that is executed if a new instance of a downstream task is available. ")

  public String getUpdateAction() {
    return updateAction;
  }


  public void setUpdateAction(String updateAction) {
    this.updateAction = updateAction;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LanceInterface lanceInterface = (LanceInterface) o;
    return Objects.equals(this.containerType, lanceInterface.containerType) &&
        Objects.equals(this.operatingSystem, lanceInterface.operatingSystem) &&
        Objects.equals(this.init, lanceInterface.init) &&
        Objects.equals(this.preInstall, lanceInterface.preInstall) &&
        Objects.equals(this.install, lanceInterface.install) &&
        Objects.equals(this.postInstall, lanceInterface.postInstall) &&
        Objects.equals(this.preStart, lanceInterface.preStart) &&
        Objects.equals(this.start, lanceInterface.start) &&
        Objects.equals(this.startDetection, lanceInterface.startDetection) &&
        Objects.equals(this.stopDetection, lanceInterface.stopDetection) &&
        Objects.equals(this.postStart, lanceInterface.postStart) &&
        Objects.equals(this.preStop, lanceInterface.preStop) &&
        Objects.equals(this.stop, lanceInterface.stop) &&
        Objects.equals(this.postStop, lanceInterface.postStop) &&
        Objects.equals(this.shutdown, lanceInterface.shutdown) &&
        Objects.equals(this.updateAction, lanceInterface.updateAction) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(containerType, operatingSystem, init, preInstall, install, postInstall, preStart, start, startDetection, stopDetection, postStart, preStop, stop, postStop, shutdown, updateAction, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LanceInterface {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    containerType: ").append(toIndentedString(containerType)).append("\n");
    sb.append("    operatingSystem: ").append(toIndentedString(operatingSystem)).append("\n");
    sb.append("    init: ").append(toIndentedString(init)).append("\n");
    sb.append("    preInstall: ").append(toIndentedString(preInstall)).append("\n");
    sb.append("    install: ").append(toIndentedString(install)).append("\n");
    sb.append("    postInstall: ").append(toIndentedString(postInstall)).append("\n");
    sb.append("    preStart: ").append(toIndentedString(preStart)).append("\n");
    sb.append("    start: ").append(toIndentedString(start)).append("\n");
    sb.append("    startDetection: ").append(toIndentedString(startDetection)).append("\n");
    sb.append("    stopDetection: ").append(toIndentedString(stopDetection)).append("\n");
    sb.append("    postStart: ").append(toIndentedString(postStart)).append("\n");
    sb.append("    preStop: ").append(toIndentedString(preStop)).append("\n");
    sb.append("    stop: ").append(toIndentedString(stop)).append("\n");
    sb.append("    postStop: ").append(toIndentedString(postStop)).append("\n");
    sb.append("    shutdown: ").append(toIndentedString(shutdown)).append("\n");
    sb.append("    updateAction: ").append(toIndentedString(updateAction)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

